<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
    <!-- ドライバクラス名 -->
    <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
    <!-- データベースURL -->
    <property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"/>
    <!-- データベースユーザー名 -->
    <property name="username" value="PORT_USR"/>
    <!-- データベースパスワード -->
    <property name="password" value="1234"/>
</bean>

<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <!-- データソースを参照 -->
    <property name="dataSource" ref="dataSource"/>
    <!-- MyBatis設定ファイルの場所 -->
    <property name="configLocation" value="classpath:/mybatis-config.xml"/>
    <!-- マッパーファイルの場所 -->
    <property name="mapperLocations" value="classpath:/mappers/**/*Mapper.xml"/>
</bean>

<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
    <!-- SqlSessionFactoryを参照 -->
    <constructor-arg index="0" ref="sqlSessionFactory"/>
</bean>	
</beans>
<!-- 
bean
- 主にSpringで使用される
- オブジェクトを管理する基本単位であり、Spring IoC（コンテナによって管理されるオブジェクト）
  SpringはこれらのBeanを生成し、初期化、注入、消滅などの作業を自動的に処理します
- POJO（Plain Old Java Object）で実装することができます
- 主に @Component, @Service, @Repository, @Controller などのアノテーションを使用して定義され、
  Springコンテナがこれを管理します
- 設定ファイル（xmlまたはJavaConfig）を通じて生成および管理方法を設定します
- 依存性注入（DI）を通じて他のBeanと相互作用することができます

component
- より広い意味で使用される用語です。一般的にシステム内で再利用可能な構成要素を指します
-->





