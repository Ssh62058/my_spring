package com.my.shop.controller;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.List;
import java.util.UUID;

import javax.annotation.Resource;
import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.my.shop.service.AdminService;
import com.my.shop.utils.UploadFileUtils;
import com.my.shop.vo.CategoryVO;
import com.my.shop.vo.GoodsVO;
import com.my.shop.vo.GoodsViewVO;
import com.my.shop.vo.MemberVO;
import com.my.shop.vo.OrderListVO;
import com.my.shop.vo.OrderVO;
import com.my.shop.vo.ReplyListVO;
import com.my.shop.vo.ReplyVO;

import net.sf.json.JSONArray;

@Controller
@RequestMapping("/admin/*")
public class AdminController {
	
	private static final Logger logger = LoggerFactory.getLogger(AdminController.class);
	
	@Inject
	AdminService adminService;
	
	@Resource(name="uploadPath")//アップロードパスの定義
	private String uploadPath;
	
	//管理者メイン
	@GetMapping("/index")//admin/index
	public void getIndex() throws Exception{
		logger.info("管理者画面に入る");
	}
	
	//商品登録
	@GetMapping("/goods/register")
	public void getGoodsRegister(Model model) throws Exception{
		logger.info("商品登録ページに入る");
		
		//最初は空にしておく必要があります、初期化
List<CategoryVO> category = null; //CategoryVO型のリスト変数categoryを宣言する
category = adminService.category();
//DBに保存されているカテゴリーを取得して、categoryに保存
model.addAttribute("category", JSONArray.fromObject(category));
//変数categoryをJSONタイプに変換して、カテゴリーセッションに設定
	}
		
	//商品登録 post
	@PostMapping("/goods/register")
	public String postGoodsRegister(GoodsVO vo, MultipartFile file) throws Exception{
//複数ファイルを使用する場合
//画像をアップロードするフォルダを設定 =
String imgUploadPath = uploadPath + File.separator + "imgUpload";
String ymdPath = UploadFileUtils.calcPath(imgUploadPath);//上記のフォルダを基準にして年月日フォルダを作成
String fileName = null;

//添付ファイルがない場合も考慮する必要があります
if(file.getOriginalFilename() != null && file.getOriginalFilename() != "") {
	fileName = UploadFileUtils.fileUpload(imgUploadPath, file.getOriginalFilename(), file.getBytes(), ymdPath);
	//元ファイルパス + ファイル名を保存
	vo.setGdsImg(File.separator + "imgUpload" + ymdPath + File.separator + fileName);
	//サムネイル
	vo.setGdsThumbImg(File.separator + "imgUpload" + ymdPath + File.separator +"s"+File.separator+"s_" +fileName);	
}else { //添付ファイルがない場合 
//事前にアップロードしておいた none.png ファイルを代わりに表示
	fileName = File.separator + "images" + File.separator + "none.png";
	vo.setGdsImg(fileName);
	vo.setGdsThumbImg(fileName);
}

	adminService.register(vo);
	return "redirect:/admin/index";
}
	
//商品リスト
@GetMapping(value="/goods/list")
public void getGoodsList(Model model) throws Exception{
	logger.info("商品リストを表示");
	List<GoodsViewVO> list = adminService.goodslist(); // GoodsVO型の List 型変数 list を宣言
	model.addAttribute("list", list);
}
	
//商品詳細 1)リストでタイトルを選択 2)該当タイトルの番号を利用して 3)詳細ページを表示
@GetMapping(value="/goods/view")
public void getGoodsview(@RequestParam("n") int gdsNum, Model model)throws Exception{
	logger.info("詳細ページ");
//返却する変数を定義
	GoodsViewVO goods = adminService.goodsView(gdsNum);
	model.addAttribute("goods", goods);
}
	
//CKEditorでファイルをアップロード
@PostMapping(value="/goods/ckUpload")
public void postCKEditorImgUpload(HttpServletRequest req, HttpServletResponse res, @RequestParam MultipartFile upload)throws Exception{
	logger.info("CKEditorに添付ファイルとして登録したい場合、このメソッドを使用してください");
	//ランダム文字生成
	UUID uid = UUID.randomUUID();
	
	OutputStream out = null;
	PrintWriter printWriter = null; //タグやスクリプトをJavaで使う場合

	//タグで日本語が表示されるよう文字化け防止
	res.setCharacterEncoding("utf-8");
	res.setContentType("text/html; charset=utf-8");
	
	try {
		String fileName = upload.getOriginalFilename(); //ファイル名取得
		byte[] bytes = upload.getBytes();
		//アップロードパス
		String ckUploadPath = uploadPath + File.separator + "ckUpload" + File.separator + uid + "_" + fileName;
		out = new FileOutputStream(new File(ckUploadPath));
		out.write(bytes);
		out.flush(); //outのデータを送信して初期化

		String callback = req.getParameter("CKEditorFuncNum");
		printWriter = res.getWriter();
		String fileUrl = "/ckUpload/" + uid + "_" +fileName; //作成画面
		//アップロード時メッセージを表示
		printWriter.println("<script> "
		+ "window.parent.CKEDITOR.tools.callFunction("
		+ callback +",'"+ fileUrl +"','画像をアップロードしました')"
		+ "</script>");
		printWriter.flush();
	}catch(IOException e) {
		e.printStackTrace();
	}finally {
		try {
			if(out != null) { out.close(); }
			if(printWriter != null) { printWriter.close(); }
		}catch(IOException e) {
			e.printStackTrace();
		}
	}
	return;	
}

//商品修正 1)修正対象の商品を読み込み 2)該当番号の商品を修正
@GetMapping(value="/goods/modify")
public void getGoodsModify(@RequestParam("n") int gdsNum, Model model) throws Exception{
//@RequestParam("n") で URL の n の値を取得して gdsNum に格納
	logger.info("修正ページに入る");
	//商品情報を取得
	GoodsViewVO goods = adminService.goodsView(gdsNum);
	model.addAttribute("goods", goods);
	//カテゴリ内容を取得
	List<CategoryVO> category = null;
	category = adminService.category();
	model.addAttribute("category", JSONArray.fromObject(category));
	
	//追加
	List<CategoryVO> categoryVO = adminService.category();
	model.addAttribute("categoryVO", categoryVO);
}

//実際に商品内容を修正（既存画像を修正するかそのまま使うか）
@PostMapping(value="/goods/modify")
public String postGoodsModify(GoodsVO vo, MultipartFile file, HttpServletRequest req) throws Exception{
	logger.info("商品修正");
	//新しいファイルが登録されたか確認
	if(file.getOriginalFilename() != null && file.getOriginalFilename() != "") {
		//1)既存ファイル削除（画像とサムネイル両方）
		new File(uploadPath + req.getParameter("gdsImg")).delete();
		new File(uploadPath + req.getParameter("gdsThumbImg")).delete();
		//2)新しいファイルをアップロード
		String imgUploadPath = uploadPath + File.separator + "imgUpload";
		String ymdPath = UploadFileUtils.calcPath(imgUploadPath);
		String fileName = UploadFileUtils.fileUpload(imgUploadPath, file.getOriginalFilename(), file.getBytes(), ymdPath);
		vo.setGdsImg(File.separator + "imgUpload" + ymdPath + File.separator + fileName);
		vo.setGdsThumbImg(File.separator + "imgUpload" + ymdPath + File.separator + "s" + File.separator + "s_" + fileName);
	}else { //新しいファイルが登録されていない場合、既存の画像をそのまま使用
		vo.setGdsImg(req.getParameter("gdsImg"));
		vo.setGdsThumbImg(req.getParameter("gdsThumbImg"));
	}
	adminService.goodsModify(vo);
	return "redirect:/admin/index";
}

//商品削除
@GetMapping(value="/goods/delete")
public String postGoodsDelete(@RequestParam("n") int gdsNum) throws Exception{
	logger.info("商品削除");
	adminService.goodsDelete(gdsNum);
	return "redirect:/admin/index";
}

//注文リスト：ステータス変更は管理者、注文リスト表示
@GetMapping(value="/shop/orderList")
public void getOrderList(Model model) throws Exception{
	logger.info("管理者が確認するこのサイトのすべての顧客注文リスト");
	List<OrderVO> orderList = adminService.orderList();
	model.addAttribute("orderList", orderList);
}

//注文詳細リスト
@GetMapping(value="/shop/orderView")
public void getOrderList(@RequestParam("n") String orderId, Model model, OrderVO order) throws Exception{
	logger.info("顧客注文の詳細ページ");
	order.setOrderId(orderId);
	List<OrderListVO> orderView = adminService.orderView(order); 
	model.addAttribute("orderView", orderView);
}

//注文詳細 - ステータス変更
@PostMapping(value="/shop/orderView")
public String delivery(OrderVO order) throws Exception{
	logger.info("配送ステータス設定ページに入る");
	adminService.delivery(order);
	//既存サービス使用
	List<OrderListVO> orderView = adminService.orderView(order);
	//コンストラクタ利用
	GoodsVO goods = new GoodsVO();
	for(OrderListVO i : orderView) {
		goods.setGdsNum(i.getGdsNum());
		goods.setGdsStock(i.getCartStock());
		adminService.changeStock(goods);
	}
	return "redirect:/admin/shop/orderView?n="+order.getOrderId();
}

//すべてのレビュー（コメント）
@GetMapping(value="/shop/allReply")
public void getAllReply(Model model) throws Exception{
	logger.info("顧客が書いたすべてのコメント");
	List<ReplyListVO> reply = adminService.allReply();
	model.addAttribute("reply", reply);
}

//すべてのレビュー削除
@PostMapping(value="/shop/allReply")
public String PostAllReply(ReplyVO reply) throws Exception{
	logger.info("顧客が書いたすべてのコメントを削除");
	adminService.deleteReply(reply.getRepNum());
	return "redirect:/admin/shop/allReply";
}

@GetMapping(value="/shop/allUser")
public void getUserList(Model model) throws Exception{
	logger.info("ユーザテーブル");
	List<MemberVO> memberVO = adminService.memberList();
	model.addAttribute("memberList", memberVO);
}
}
