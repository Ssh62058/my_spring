package com.my.shop.persistence;

import java.util.HashMap;
import java.util.List;

import javax.inject.Inject;

import org.apache.ibatis.session.SqlSession;
import org.springframework.stereotype.Repository;

import com.my.shop.vo.CartListVO;
import com.my.shop.vo.CartVO;
import com.my.shop.vo.GoodsViewVO;
import com.my.shop.vo.OrderDetailVO;
import com.my.shop.vo.OrderListVO;
import com.my.shop.vo.OrderVO;
import com.my.shop.vo.ReplyListVO;
import com.my.shop.vo.ReplyVO;

// データアクセス層(DAO)クラス - データベース操作を行う
@Repository
public class ShopDAOImpl implements ShopDAO {

    @Inject
    private SqlSession sql; // SQLセッションを使用してデータベース操作を実行する

    // マッパーの名前空間定義
    private static String namespace = "com.my.shop.mappers.shopMapper";

    // カテゴリーコードと参照コードに基づいて商品リストを取得
    @Override
    public List<GoodsViewVO> list(int cateCode, int cateCodeRef) throws Exception {
        HashMap<String, Object> map = new HashMap<>(); // カテゴリー情報をマップに設定
        map.put("cateCode", cateCode);
        map.put("cateCodeRef", cateCodeRef);

        return sql.selectList(namespace + ".list_1", map); // 商品リストを取得
    }

    // 単一のカテゴリーコードを基に商品リストを取得
    @Override
    public List<GoodsViewVO> list(int cateCode) throws Exception {
        return sql.selectList(namespace + ".list_2", cateCode);
    }

    // 商品番号を基に商品詳細を取得
    @Override
    public GoodsViewVO goodsView(int gdsNum) throws Exception {
        return sql.selectOne("com.my.shop.mappers.adminMapper" + ".goodsView", gdsNum);
    }

    // コメント登録
    @Override
    public void registReply(ReplyVO reply) throws Exception {
        sql.insert(namespace + ".registReply", reply);
    }

    // 商品番号に基づくコメントリストを取得
    @Override
    public List<ReplyListVO> replyList(int gdsNum) throws Exception {
        return sql.selectList(namespace + ".replyList", gdsNum);
    }

    // コメント削除
    @Override
    public void deleteReply(ReplyVO reply) throws Exception {
        sql.delete(namespace + ".deleteReply", reply);
    }

    // コメント作成者のユーザーIDを確認
    @Override
    public String idCheck(int repNum) throws Exception {
        return sql.selectOne(namespace + ".replyUserIdCheck", repNum);
    }

    // コメント修正
    @Override
    public void modifyReply(ReplyVO reply) throws Exception {
        sql.update(namespace + ".modifyReply", reply);
    }

    // カート項目を追加
    @Override
    public void addCart(CartVO cart) throws Exception {
        sql.insert(namespace + ".addCart", cart);
    }

    // ユーザーIDに基づくカートリストを取得
    @Override
    public List<CartListVO> cartList(String userId) throws Exception {
        return sql.selectList(namespace + ".cartList", userId);
    }

    // カート項目を削除
    @Override
    public void deleteCart(CartVO cart) throws Exception {
        sql.delete(namespace + ".deleteCart", cart);
    }

    // 注文情報を登録
    @Override
    public void orderInfo(OrderVO order) throws Exception {
        sql.insert(namespace + ".orderInfo", order);
    }

    // 注文詳細情報を登録
    @Override
    public void orderInfo_Details(OrderDetailVO orderDetail) throws Exception {
        sql.insert(namespace + ".orderInfo_Details", orderDetail);
    }

    // ユーザーIDに関連するカートを全削除
    @Override
    public void cartAllDelete(String userId) throws Exception {
        sql.delete(namespace + ".cartAllDelete", userId);
    }

    // 注文リストを取得
    @Override
    public List<OrderVO> orderList(OrderVO order) throws Exception {
        return sql.selectList(namespace + ".orderList", order);
    }

    // 注文詳細ビューを取得
    @Override
    public List<OrderListVO> orderView(OrderVO order) throws Exception {
        return sql.selectList(namespace + ".orderView", order);
    }
}