package com.my.shop.controller;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.my.shop.service.MemberService;
import com.my.shop.vo.MemberVO;

@Controller
@RequestMapping("/member/*") // ユーザー関連操作のURLを管理
public class MemberController {
    
    @Inject
    MemberService service; // 会員関連のビジネスロジックを処理するサービスクラスを呼び出す
    
    // パスワードを暗号化するためのエンコーダーを設定
    @Autowired
    BCryptPasswordEncoder passEncoder;
    
    // パスワードエンコーダーのBeanを定義
    @Bean
    BCryptPasswordEncoder passEncoder() {
        return new BCryptPasswordEncoder();
    }

    private static final Logger logger = LoggerFactory.getLogger(MemberController.class); // ログを記録する

    // サインアップ画面を表示する(GETリクエスト)
    @GetMapping("/signup") // member/signup
    public void getSignup() throws Exception {
        logger.info("サインアップ画面へ");
    }

    // 会員登録処理(POSTリクエスト)
    @PostMapping("/signup")
    public String postSignup(MemberVO vo) throws Exception {
        logger.info("会員登録機能");
        
        // 入力されたパスワードを暗号化して保存
        String inputPass = vo.getUserPass();
        String pass = passEncoder.encode(inputPass); // パスワードを暗号化
        vo.setUserPass(pass); // 暗号化したパスワードを設定

        String inputPass2 = vo.getUserPassRe();
        String pass2 = passEncoder.encode(inputPass2); // 再入力されたパスワードも暗号化
        vo.setUserPassRe(pass2);

        service.signup(vo); // ユーザー情報をDBに登録
        return "redirect:/"; // 登録後トップページにリダイレクト
    }

    // サインイン画面を表示する(GETリクエスト)
    @GetMapping("/signin") // member/signin
    public void getSignin() throws Exception {
        logger.info("ログイン画面へ");
    }

    // ログイン処理(POSTリクエスト)
    @PostMapping("/signin")
    public String postSignin(MemberVO vo, HttpServletRequest req, RedirectAttributes rttr) throws Exception {
        logger.info("ポスト サインイン");
        
        MemberVO login = service.signin(vo); // 入力情報に一致するユーザーを取得
        HttpSession session = req.getSession(); // ユーザーセッションを取得
        
        boolean passMatch = passEncoder.matches(vo.getUserPass(), login.getUserPass()); // パスワードを照合

        if (login != null && passMatch) { // ユーザー情報が一致する場合
            session.setAttribute("member", login); // セッションにユーザー情報を保存
        } else { // ユーザー情報が一致しない場合
            session.setAttribute("member", null); // セッションを空に設定
            rttr.addFlashAttribute("msg", false); // エラーメッセージを設定
            return "redirect:/member/signin"; // 再度ログイン画面へリダイレクト
        }
        return "redirect:/"; // ログイン成功時トップページにリダイレクト
    }

    // ログアウト処理(GETリクエスト)
    @GetMapping("/signout")
    public String signout(HttpSession session) throws Exception {
        logger.info("ログアウト");
        service.signout(session); // ユーザーセッションを終了
        return "redirect:/"; // ログアウト後トップページへリダイレクト
    }
}