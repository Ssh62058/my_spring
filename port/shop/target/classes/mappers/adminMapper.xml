<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.my.shop.mappers.adminMapper">

<!-- カテゴリ取得 -->
<select id="category" resultType="com.my.shop.vo.CategoryVO">
<![CDATA[
select
level, cateName, cateCode, cateCodeRef
from goods_category
start with cateCodeRef is null connect by prior cateCode = cateCodeRef
]]>
</select>

<insert id="register" parameterType="com.my.shop.vo.GoodsVO">
<![CDATA[
insert into tbl_goods(gdsNum, gdsName, cateCode, gdsPrice, gdsStock, gdsDes, gdsImg, gdsThumbImg)
values
(seq_gdsNum.nextval, #{gdsName}, #{cateCode}, #{gdsPrice}, #{gdsStock}, #{gdsDes}, #{gdsImg}, #{gdsThumbImg})
]]>
</insert>

<!-- 商品リスト -->
<select id="goodslist" resultType="com.my.shop.vo.GoodsVO">
<![CDATA[
select
gdsNum, gdsName, cateCode, gdsPrice, gdsStock, gdsDes, gdsImg, gdsThumbImg, gdsDate
from tbl_goods
order by gdsNum desc
]]>
</select>

<select id="goodsView" resultType="com.my.shop.vo.GoodsViewVO">
<![CDATA[
select
g.gdsNum, g.gdsName, g.cateCode, c.cateCodeRef, c.cateName, gdsPrice, gdsStock, gdsDes, gdsImg, gdsDate,
g.gdsImg, g.gdsThumbImg
from tbl_goods g
inner join goods_category c
on g.cateCode = c.cateCode
where g.gdsNum = #{gdsNum}
]]>
</select>

<update id="goodsModify">
<![CDATA[
update tbl_goods
set
gdsName = #{gdsName}, cateCode=#{cateCode}, gdsPrice = #{gdsPrice}, gdsStock=#{gdsStock}, gdsDes=#{gdsDes}, gdsImg=#{gdsImg}, gdsThumbImg=#{gdsThumbImg}
where gdsNum = ${gdsNum}
]]>
</update>

<delete id="goodsDelete">
<![CDATA[
delete tbl_goods where gdsNum = #{gdsNum}
]]>
</delete>

<insert id="addCart">
<![CDATA[
insert into tbl_cart (cartNum, userId, gdsNum, cartStock) values (seq_tbl_cart.nextval, #{userId}, #{gdsNum}, #{cartStock})
]]>
</insert>

<select id="cartList" resultType="com.my.shop.vo.CartListVO">
<![CDATA[
select 
row_number() over(order by c.cartNum desc) as num,
c.cartNum, c.userId, c.gdsNum, c.cartStock, g.addDate,
g.gdsName, g.gdsPrice, g.gdsThumbImg
from tbl_cart c
inner join tbl_goods g
on c.gdsNum = g.gdsNum
where c.userId = #{userId}
]]>
</select>

<select id="orderList" resultType="com.my.shop.vo.OrderVO">
<![CDATA[
select
orderId, userId, orderRec, userAddr1, userAddr2, userAddr3, orderPhone, amount, orderDate, delivery
from tbl_order
]]>
</select>

<select id="orderView" resultType="com.my.shop.vo.OrderListVO">
<![CDATA[
select
o.orderId, o.userId, o.orderRec, o.userAddr1, o.userAddr2, o.userAddr3, o.orderPhone, o.amount, o.orderDate, o.delivery,
d.orderDetailsNum, d.gdsNum, d.cartStock,
g.gdsName, g.gdsThumbImg, g.gdsPrice
from tbl_order o
inner join tbl_order_details d
on o.orderId = d.orderId
inner join tbl_goods g
on d.gdsNum = g.gdsNum
where o.orderId = #{orderId}
]]>
</select>

<update id="delivery">
<![CDATA[
update tbl_order 
set delivery = #{delivery} 
where orderId = #{orderId}
]]>
</update>

<update id="changeStock">
<![CDATA[
update tbl_goods 
set gdsStock = gdsStock - #{gdsStock}
where gdsNum = #{gdsNum}
]]>
</update>

<select id="allReply" resultType="com.my.shop.vo.ReplyListVO">
<![CDATA[
select
r.gdsNum, r.userId, r.repNum, r.repCon, r.repDate,
m.userName
from tbl_reply r
inner join tbl_member m
on r.userId = m.userId
]]>
</select>

<delete id="deleteReply">
<![CDATA[
delete tbl_reply where repNum = #{repNum}
]]>
</delete>

<select id="memberList" resultType="com.my.shop.vo.MemberVO">
<![CDATA[
select userId, userPass, userPassRe, userName, userPhone, userEmail, userGender, userAddr1, userAddr2, userAddr3, verify, regiDate
from
tbl_member
]]>
</select>

<!-- 
Join : 複数のテーブルで関連する列を基準に行を結合する際に使用
内部結合[INNER JOIN] : 両方のテーブルで一致する値を持つレコードを選択
on g.cateCode = c.cateCode : gテーブルとcテーブルの値が一致する場合、両方のテーブルのデータを結合

左結合[LEFT JOIN] : 左側のテーブルのすべてのレコードと、右側のテーブルの一致するレコードを返す
右結合[RIGHT JOIN]: 右側のテーブルのすべてのレコードと、左側の一致するレコードを返す
全体結合[FULL]: 左右のテーブルのすべてのレコードを一致する場合に返す
自己結合[self]: テーブルが自己自身と結合されます

エイリアス tbl_goods.gdsNum : 簡単なエイリアス g.gdsNum
 -->

</mapper>

<!-- 
start with cateCodeRef is null => 階層構造の開始点
connect by prior cateCode = cateCodeRef => 親カテゴリが前のレベル(現在のカテゴリ)と一致しているかを再帰的に検索
 -->