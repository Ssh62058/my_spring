객체 지향 프로그래밍
프로그램을 단순히 데이터와 처리 방법으로 나누는 것이 아니라 기능, 목적, 속성에 따라서 객체라는 기본 단위로 나누어서 이들의 상호작용을 서술하는 방식이다.
객체란 메소드, 변수를 가지며 특정역할을 수행하도록 인간이 정의한 추상적인 개념이다.

캡슐화(Encapsulation)는 객체 지향 프로그래밍(OOP)에서 중요한 개념 중 하나로, 데이터를 보호하고 접근을 제어하는 기술입니다. 캡슐화의 핵심 아이디어는 객체 내부의 데이터와 메서드를 하나의 단위로 묶고, 외부에서 객체의 데이터를 직접적으로 변경하거나 접근할 수 없도록 제한하는 것입니다. 대신, 데이터를 다루는 방법을 제공하는 메서드를 통해 접근하게 합니다.

-데이터 보호: 변수를 주로 private로 선언해 외부에서 접근할 수 없게 함, 외부에서 접근 가능 -> public 선언
-접근 제어 : 데이터에 대한 접근 권한을 제어할 수 있습니다. 예를 들어, 읽기만 가능한 속성은 getter 메서드만 제공하고, 수정이 불가능하게 할 수 있습니다. 반대로, 수정이 가능한 속성에는 setter 메서드를 제공하여 데이터의 변경을 제어할 수 있습니다.
-코드의 유지보수 용이성: 캡슐화 덕분에 객체의 내부 구현을 변경하더라도 외부에서는 영향을 받지 않으므로 코드 수정 시 다른 부분에 미치는 영향을 최소화할 수 있습니다. 즉, 객체 내부의 구현이 변경되어도 외부에서 그 객체를 사용하는 코드에는 영향을 주지 않게 됩니다.

캡슐화의 장점:
데이터 보호: 데이터를 외부에서 직접 수정하는 것을 방지하고, 유효성 검사를 통해 오류를 줄일 수 있습니다.
코드 관리 용이: 객체의 구현을 변경하더라도 외부 코드에 영향을 주지 않아서 유지보수가 쉬워집니다.
모듈화: 객체가 독립적으로 기능을 수행할 수 있게 되어, 다른 객체와의 결합도를 낮출 수 있습니다.

상속(inheritance)
상속은 자식 클래스가 부모 클래스의 특성과 기능을 그대로 물려받는 것을 말한다. 기능의 일부분을 변경해야 할 경우 자식 클래스에서 상속받은 그 기능만을 수정해서 다시 정의하게 되는데, 이러한 작업을 '오버라이딩(overriding)'이라고 한다. 상속은 캡슐화를 유지하면서도 클래스의 재사용이 용이하도록 해 준다.

상속의 주요 특징:
재사용성: 상속을 통해 이미 정의된 클래스를 기반으로 새로운 클래스를 쉽게 만들 수 있습니다. 부모 클래스의 속성(필드)과 메서드(함수)를 자식 클래스가 물려받아, 기존 코드의 재사용이 가능해집니다.

확장성: 자식 클래스는 부모 클래스의 특성을 그대로 물려받지만, 추가적인 속성이나 메서드를 정의하거나 부모 클래스의 메서드를 재정의(오버라이딩)하여 기능을 확장할 수 있습니다.

계층 구조: 상속은 클래스들 간의 계층 구조를 형성하게 합니다. 부모 클래스에서 공통된 속성과 기능을 정의하고, 자식 클래스는 이를 물려받으면서 특정한 기능을 더 추가하거나 변경할 수 있습니다.

상속의 구조:
부모 클래스 (Super Class 또는 Parent Class): 다른 클래스에 상속을 제공하는 클래스.
자식 클래스 (Sub Class 또는 Child Class): 부모 클래스를 상속받아 속성 및 메서드를 물려받는 클래스.

상속의 장점:
코드 재사용: 부모 클래스에서 정의된 코드를 자식 클래스에서 재사용할 수 있어, 중복 코드를 줄이고 유지보수를 용이하게 만듭니다.

계층적 관계 모델링: 상속을 통해 객체들 간의 계층적 관계를 명확하게 정의할 수 있습니다. 예를 들어, Dog와 Cat은 모두 Animal 클래스를 상속받으므로, 동물들이 공통적인 특성을 공유한다고 표현할 수 있습니다.

확장 가능성: 새로운 기능이 필요할 때 자식 클래스를 추가하여 기존 코드에 영향을 주지 않고 기능을 확장할 수 있습니다.

**다형성(Polymorphism)**은
 객체 지향 프로그래밍(OOP)의 핵심 개념 중 하나로, 동일한 인터페이스나 메서드 이름이 다양한 방식으로 동작할 수 있는 능력을 의미합니다. 즉, 하나의 코드가 여러 다른 형태로 동작할 수 있도록 해주는 특성입니다. 다형성은 주로 메서드 오버로딩(Method Overloading)과 메서드 오버라이딩(Method Overriding)을 통해 구현됩니다.

다형성의 종류
1.컴파일 타임 다형성 (Static Polymorphism):
메서드 오버로딩과 연산자 오버로딩이 여기에 해당됩니다. 컴파일 시점에서 어떤 메서드가 호출될지 결정됩니다.

1-1. 메서드 오버로딩 (Method Overloading) - 컴파일 타임 다형성
메서드 오버로딩은 동일한 이름을 가진 메서드를 매개변수의 개수나 타입이 다르게 여러 번 정의하는 것입니다. 컴파일러는 호출 시점에 인수의 타입과 개수를 보고 적절한 메서드를 선택합니다.

2.런타임 다형성 (Dynamic Polymorphism):
메서드 오버라이딩을 통해 구현됩니다. 런타임 시점에서 어떤 메서드가 호출될지 결정됩니다.

2-1 메서드 오버라이딩은 부모 클래스에서 정의된 메서드를 자식 클래스에서 재정의하는 것입니다. 이때, 자식 클래스는 부모 클래스의 메서드를 "덮어쓰는" 방식으로 새로운 동작을 정의할 수 있습니다. 오버라이딩된 메서드는 런타임에 호출 시점에 결정됩니다.

다형성의 장점:
코드의 유연성: 다형성을 활용하면, 동일한 인터페이스로 다양한 객체를 처리할 수 있습니다. 예를 들어, 여러 다른 클래스가 동일한 메서드를 공유하고, 각 클래스는 해당 메서드를 자신만의 방식으로 구현할 수 있기 때문에, 코드의 확장성이 좋아집니다.

코드 재사용성: 다형성 덕분에 다양한 객체들을 동일한 방식으로 처리할 수 있어 코드의 재사용성을 높이고, 여러 가지 객체를 다루는 코드에서 일관성을 유지할 수 있습니다.

유지보수 용이: 새로운 기능을 추가하거나 기존 클래스를 수정할 때, 다형성을 활용하면 기존 코드에 최소한의 변경만으로 기능을 확장할 수 있습니다. 특히, 부모 클래스의 메서드를 자식 클래스에서 오버라이딩하면, 코드의 구조를 깔끔하게 유지하면서 새로운 동작을 추가할 수 있습니다.

1. 컴파일 (Compilation)
컴파일은 소스 코드(사람이 작성한 코드)가 기계어(컴퓨터가 이해할 수 있는 코드)로 번역되는 과정입니다. 소스 코드는 일반적으로 고수준 언어로 작성되지만, 컴퓨터가 이를 직접 실행할 수 없기 때문에 컴파일러라는 프로그램을 통해 기계어로 변환해야 합니다.

컴파일 과정:
소스 코드 작성: 프로그램 개발자는 고수준 프로그래밍 언어(예: C, C++, 자바 등)로 코드를 작성합니다.
컴파일러 실행: 작성한 소스 코드를 컴파일러로 처리합니다.
기계어 코드 생성: 컴파일러는 소스 코드를 읽고, 이를 기계어(또는 바이너리 코드)로 변환합니다. 이 과정에서 오류가 있으면 컴파일러가 오류 메시지를 출력합니다.
실행 파일 생성: 컴파일이 성공하면, 실행 가능한 파일(예: .exe, .class, .out)이 생성됩니다.

2. 런타임 (Runtime)
런타임은 프로그램이 실제로 실행되는 시간을 의미합니다. 즉, 컴파일이 끝난 후 프로그램이 사용자에게 실행될 때, 그 코드가 실제로 동작하는 시간입니다.

런타임 과정:
프로그램 실행: 사용자가 실행 파일을 실행하면 운영 체제에서 이를 받아 실행됩니다.
메모리 할당: 프로그램이 실행되는 동안 필요한 메모리를 할당하고, 변수들이 메모리에서 초기화됩니다.
프로그램 동작: 프로그램의 코드가 CPU에서 실행되고, 함수가 호출되고, 연산이 이루어집니다.
런타임 오류 발생 가능: 코드가 실행되는 도중에 오류가 발생할 수 있으며, 이를 런타임 오류(예: 배열 인덱스 범위 초과, null 포인터 참조 등)라고 합니다.